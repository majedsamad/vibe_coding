#:kivy 2.1.0
#:import dp kivy.metrics.dp
#:import Factory kivy.factory.Factory
#:import RecycleDataViewBehavior kivy.uix.recycleview.views.RecycleDataViewBehavior
#:import BooleanProperty kivy.properties.BooleanProperty

#:import AccountManagementScreen account_management.AccountManagementScreen

# Define a simple TextInput for numeric input (basic version)
<NumericInput@TextInput>:
    input_filter: 'float'
    multiline: False
    write_tab: False # Important for focus traversal

<AccountListItem>: # Remove @BoxLayout, use the Python class name directly
    # Properties (account_id, account_name, selected) are now defined in the Python class
    # on_touch_down is now handled by the Python method

    orientation: 'horizontal'
    size_hint_y: None
    height: dp(40)

    canvas.before:
        Color:
            # Use the 'selected' property defined in the Python class
            rgba: (0.3, 0.3, 0.7, 1) if self.selected else (0.1, 0.1, 0.1, 1)
        Rectangle:
            pos: self.pos
            size: self.size

    Label:
        id: name_label
        # Use the 'account_name' property defined in the Python class
        text: root.account_name
        size_hint_x: 0.8

<CategoryListItem>:
    # Properties (category_id, category_name, selected) will be in the Python class
    # on_touch_down handled by Python method

    orientation: 'horizontal'
    size_hint_y: None
    height: dp(40)

    canvas.before:
        Color:
            rgba: (0.3, 0.7, 0.3, 1) if self.selected else (0.1, 0.1, 0.1, 1) # Different highlight color
        Rectangle:
            pos: self.pos
            size: self.size

    Label:
        id: name_label_cat # Use a different id if needed, though not strictly necessary here
        # Use the 'category_name' property defined in the Python class
        text: root.category_name
        size_hint_x: 0.8 # Let name take most space

# Define the Screen Manager rule (optional if defined in Python)
<MyScreenManager>:
    AccountsScreen:
        name: 'accounts'
    BudgetScreen:
        name: 'budget'
    AccountManagementScreen:
        name: 'account_management'
    CategoryManagementScreen:
        name: 'category_management'

<AccountManagementScreen>:
    name: 'account_management'
    account_recycle_view: rv_accounts # Link the ObjectProperty to the id
    status_label: status_label_accounts # Link the ObjectProperty to the id

    BoxLayout:
        orientation: 'vertical'
        padding: dp(10)
        spacing: dp(10)

        Label:
            id: status_label_accounts
            text: "Loading accounts..."
            size_hint_y: None
            height: dp(30)

        RecycleView:
            id: rv_accounts
            viewclass: 'AccountListItem' # Tells RV what widget to use for each data item
            data: [] # This will be populated by load_accounts_for_rv in Python
            scroll_type: ['bars', 'content']
            bar_width: dp(10)
            size_hint_y: 0.8

            RecycleBoxLayout:
                default_size: None, dp(40) # Height of each item
                default_size_hint: 1, None
                size_hint_y: None
                height: self.minimum_height # Make the layout scrollable
                orientation: 'vertical'
                spacing: dp(2)

        BoxLayout:
            size_hint_y: None
            height: dp(50)
            spacing: dp(10)
            Button:
                text: "Add Account"
                on_press: root.open_add_account_popup()
            Button:
                text: "Edit Selected"
                on_press: root.open_edit_account_popup() # Calls the Python method
            Button:
                text: "Delete Selected"
                on_press: root.confirm_delete_account() # Calls the Python method
        Button:
            text: "Back to Accounts"
            size_hint_y: None
            height: dp(40)
            on_press: app.root.current = 'accounts' # Or your main screen name

<CategoryManagementScreen>:
    name: 'category_management'
    category_recycle_view: rv_categories # Link ObjectProperty
    status_label: status_label_categories # Link ObjectProperty
 
    BoxLayout:
        orientation: 'vertical'
        padding: dp(10)
        spacing: dp(10)
 
        Label:
            id: status_label_categories
            text: "Loading categories..."
            size_hint_y: None
            height: dp(30)
 
        RecycleView:
            id: rv_categories
            viewclass: 'CategoryListItem' # Use the new list item widget
            data: [] # Will be populated by Python
            scroll_type: ['bars', 'content']
            bar_width: dp(10)
            size_hint_y: 0.8
 
            RecycleBoxLayout:
                default_size: None, dp(40) # Height of each item
                default_size_hint: 1, None
                size_hint_y: None
                height: self.minimum_height # Make the layout scrollable
                orientation: 'vertical'
                spacing: dp(2)
 
        BoxLayout:
            size_hint_y: None
            height: dp(50)
            spacing: dp(10)
            Button:
                text: "Add Category"
                on_press: root.open_add_category_popup() # Calls new Python method
            Button:
                text: "Edit Selected"
                on_press: root.open_edit_category_popup() # Calls new Python method
            Button:
                text: "Delete Selected"
                on_press: root.confirm_delete_category() # Calls new Python method
        Button:
            text: "Back to Accounts" # Or wherever makes sense to navigate back to
            size_hint_y: None
            height: dp(40)
            on_press: app.root.current = 'accounts'

<AccountsScreen>:
    # Give Python access to these widgets
    snapshot_status_label: snapshot_status_id
    account_list_layout: account_list_id # ID for the GridLayout

    BoxLayout:
        orientation: 'vertical'
        padding: dp(10)
        spacing: dp(10)
        
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: None
            height: dp(48)
            spacing: dp(10) # Space between buttons
            Button:
                text: 'Manage Accounts'
                # size_hint_x: 0.5 # Uncomment if you want them exactly equal width
                on_press: root.manager.current = 'account_management' # Navigate button
            Button:
                text: 'Manage Categories'
                # size_hint_x: 0.5 # Uncomment if you want them exactly equal width
                on_press: root.manager.current = 'category_management' # Navigate button

        Label:
            text: 'Accounts & Balances for Snapshot'
            font_size: '24sp'
            size_hint_y: None
            height: dp(40)

        # Header for the account list
        BoxLayout:
            size_hint_y: None
            height: dp(30)
            Label:
                text: 'Account Name'
                halign: 'left'
                text_size: self.size
            Label:
                text: 'Current Balance'
                halign: 'right'
                text_size: self.size
                size_hint_x: 0.4 # Give balance column less space

        ScrollView:
            # This GridLayout will be populated by Python
            GridLayout:
                id: account_list_id
                cols: 2 # Two columns: Name (Label), Balance (TextInput)
                size_hint_y: None
                height: self.minimum_height # Adjust height to content
                spacing: dp(5)
                padding: [0, dp(5)] # Padding below header

        BoxLayout:
            orientation: 'vertical'
            size_hint_y: None
            height: dp(100) # Fixed height for button area
            spacing: dp(5)

            # Label to show snapshot status message
            Label:
                id: snapshot_status_id
                text: 'Enter current balances above.'
                size_hint_y: None
                height: dp(40)

            Button:
                text: 'Create New Snapshot'
                size_hint_y: None
                height: dp(50)
                on_press: root.create_new_snapshot() # Call Python method

        Button:
            text: 'Go to Budget/Transactions'
            size_hint_y: None
            height: dp(50)
            on_press: app.root.current = 'budget' # Switch screen

<BudgetScreen>:
    # Give the ObjectProperty in Python access to this Label
    transaction_list_label: transaction_list_id

    BoxLayout:
        orientation: 'vertical'
        padding: dp(10)
        spacing: dp(10)

        Label:
            text: 'Budget & Transactions'
            font_size: '24sp'
            size_hint_y: None
            height: dp(40)

        Label:
            text: '(Budget summary placeholder - e.g., Category | Budgeted | Spent)'
            size_hint_y: None
            height: dp(50) # Adjust as needed

        Button:
            text: 'Import Transactions (CSV)'
            size_hint_y: None
            height: dp(50)
            on_press: root.show_import_dialog() # Call Python method

        ScrollView:
            size_hint_y: 0.6 # Give more space to transaction list
            # Placeholder for transaction list
            Label:
                id: transaction_list_id
                text: 'Transactions will appear here after import.\n(Need categorization controls per item)'
                size_hint_y: None
                height: self.texture_size[1] # Adjust height to content
                padding: dp(10)

        BoxLayout:
            size_hint_y: None
            height: dp(50)
            Button:
                text: 'Go to Accounts'
                size_hint_y: None
                height: dp(50)
                on_press: app.root.current = 'accounts' # Switch screen

# --- Define any Popups needed (optional, can also be done purely in Python) ---
# Example if you wanted to define the file chooser popup structure here
#<FileChooserPopup@Popup>:
#    title: "Import CSV File"
#    size_hint: (0.9, 0.9)
#    # ... Add content structure (BoxLayout, FileChooser, Buttons) ...